<?php

namespace Tests\Unit\ORM\Repositories;

use App\ORM\Repositories\CustomerRepository;
use App\ORM\ResourceManager;
use Tests\TestCase;

class CustomerRepositoryTest extends TestCase
{
    /** @var \App\ORM\Repositories\CustomerRepository */
    protected $customerRepository;
    
    /** @var \App\ORM\ResourceManager|\PHPUnit\Framework\MockObject\MockObject */
    protected $resourceManager;
    
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->resourceManager    = $this->createMock(ResourceManager::class);
        $this->customerRepository = new CustomerRepository($this->resourceManager);
    }
    
    /**
     * @covers \App\ORM\Repositories\CustomerRepository::setResourceManager
     * @covers \App\ORM\Repositories\CustomerRepository::getResourceManager
     */
    public function testSettersAndGetters()
    {
        $this->customerRepository->setResourceManager($this->resourceManager);
        $this->assertEquals($this->resourceManager, $this->customerRepository->getResourceManager());
    }
    
    /**
     * @covers \App\ORM\Repositories\CustomerRepository::getCustomers
     */
    public function testGetCustomers()
    {
        $limit      = 10;
        $mockResult = [
            ['id' => 1],
            ['id' => 2],
        ];
        $this->resourceManager->method('getCustomers')->willReturn($mockResult);
        $this->resourceManager->expects($this->exactly(1))->method('getCustomers')->with($limit);
        $customers = $this->customerRepository->getCustomers($limit);
        $this->assertEquals($mockResult[0]['id'], $customers[0]->getId());
        $this->assertEquals($mockResult[1]['id'], $customers[1]->getId());
    }
    
    /**
     * @covers \App\ORM\Repositories\CustomerRepository::getCustomer
     */
    public function testGetCustomer()
    {
        $id         = 1;
        $mockResult = ['id' => 1];
        $this->resourceManager->method('getCustomer')->willReturn($mockResult);
        $this->resourceManager->expects($this->exactly(1))->method('getCustomer')->with($id);
        $customer = $this->customerRepository->getCustomer($id);
        $this->assertEquals($mockResult['id'], $customer->getId());
    }
    
}