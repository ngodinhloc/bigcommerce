<?php

namespace Tests\Unit\ORM\Cache;

use App\ORM\Cache\Engines\FileCache;
use App\ORM\Cache\Exceptions\CacheException;
use Tests\TestCase;

class FileCacheTest extends TestCase
{
    /** @var \App\ORM\Cache\Engines\FileCache */
    protected $fileCache;
    
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $cacheDir        = storage_path('cache') . DIRECTORY_SEPARATOR;
        $cacheTime       = 3600;
        $this->fileCache = new FileCache($cacheDir, $cacheTime);
    }
    
    /**
     * @covers \App\ORM\Cache\AbstractCacheEngine::__construct
     * @throws CacheException
     */
    public function testThrowException()
    {
        $cacheDir = '/invalid/path/';
        $this->expectException(CacheException::class);
        $this->expectExceptionMessage(CacheException::MSG_INVALID_CACHE_DIR . $cacheDir);
        $this->fileCache = new FileCache($cacheDir, 3600);
    }
    
    /**
     * @covers \App\ORM\Cache\AbstractCacheEngine::setCacheDir
     * @covers \App\ORM\Cache\AbstractCacheEngine::setCacheTime
     * @covers \App\ORM\Cache\AbstractCacheEngine::getCacheDir
     * @covers \App\ORM\Cache\AbstractCacheEngine::getCacheTime
     */
    public function testSettersAndGetters()
    {
        $cacheDir  = storage_path('cache') . DIRECTORY_SEPARATOR;
        $cacheTime = 3600;
        $this->fileCache->setCacheDir($cacheDir)
                        ->setCacheTime($cacheTime);
        $this->assertEquals($cacheDir, $this->fileCache->getCacheDir());
        $this->assertEquals($cacheTime, $this->fileCache->getCacheTime());
    }
    
    /**
     * @covers \App\ORM\Cache\Engines\FileCache::createKey
     */
    public function testCreateKey()
    {
        $key = 'someKey';
        $this->assertEquals(md5($key), $this->fileCache->createKey($key));
    }
    
    /**
     * @covers \App\ORM\Cache\Engines\FileCache::createKey
     * @covers \App\ORM\Cache\Engines\FileCache::writeCache
     */
    public function testWriteCache()
    {
        $data = ["some", "data"];
        $key  = 'someKey';
        $this->fileCache->writeCache($key, $data);
        $file = $this->fileCache->getCacheDir() . $this->fileCache->createKey($key);
        $this->assertFileExists($file);
    }
    
    /**
     * @covers \App\ORM\Cache\Engines\FileCache::writeCache
     * @covers \App\ORM\Cache\Engines\FileCache::getCache
     * @throws \App\ORM\Cache\Exceptions\FileCacheException
     */
    public function testGetCache()
    {
        $data = ["some", "data"];
        $key  = 'someKey';
        $this->fileCache->writeCache($key, $data);
        $cache = $this->fileCache->getCache($key);
        $this->assertEquals($data, $cache);
    }
}