<?php

namespace Tests\Unit\Services;

use App\ORM\Entities\Customer;
use App\ORM\Entities\Order;
use App\ORM\Repositories\CustomerRepository;
use App\ORM\Repositories\OrderProductRepository;
use App\ORM\Repositories\OrderRepository;
use App\Services\CustomerService;
use Tests\TestCase;

class CustomerServiceTest extends TestCase
{
    /** @var \App\Services\CustomerService */
    protected $customerService;
    
    /** @var \App\ORM\Repositories\CustomerRepository|\PHPUnit\Framework\MockObject\MockObject */
    protected $customerRepository;
    
    /** @var \App\ORM\Repositories\OrderRepository|\PHPUnit\Framework\MockObject\MockObject */
    protected $orderRepository;
    
    /** @var \App\ORM\Repositories\OrderProductRepository|\PHPUnit\Framework\MockObject\MockObject */
    protected $orderProductRepository;
    
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->customerRepository     = $this->createMock(CustomerRepository::class);
        $this->orderRepository        = $this->createMock(OrderRepository::class);
        $this->orderProductRepository = $this->createMock(OrderProductRepository::class);
        $this->customerService        = new CustomerService(
            $this->customerRepository,
            $this->orderRepository,
            $this->orderProductRepository
        );
    }
    
    /**
     * @covers \App\Services\CustomerService::setCustomerRepository
     * @covers \App\Services\CustomerService::setOrderRepository
     * @covers \App\Services\CustomerService::setOrderProductRepository
     * @covers \App\Services\CustomerService::getCustomerRepository
     * @covers \App\Services\CustomerService::getOrderRepository
     * @covers \App\Services\CustomerService::getOrderProductRepository
     */
    public function testSetterAndGetters()
    {
        $this->customerService->setCustomerRepository($this->customerRepository)
                              ->setOrderRepository($this->orderRepository)
                              ->setOrderProductRepository($this->orderProductRepository);
        $this->assertEquals($this->customerRepository, $this->customerService->getCustomerRepository());
        $this->assertEquals($this->orderRepository, $this->customerService->getOrderRepository());
        $this->assertEquals($this->orderProductRepository, $this->customerService->getOrderProductRepository());
    }
    
    /**
     * @covers \App\Services\CustomerService::getCustomers
     */
    public function testGetCustomers()
    {
        $options  = ['loadOrders' => true, 'loadOrderProducts' => true];
        $customer = new Customer(['id' => 1]);
        $order    = new Order(['id' => 10]);
        $this->customerRepository->method('getCustomers')->willReturn([$customer]);
        $this->orderRepository->method('getOrders')->willReturn([$order]);
        $this->customerRepository->expects($this->exactly(1))->method('getCustomers');
        $this->orderRepository->expects($this->exactly(1))->method('getOrders')->with($customer);
        $this->orderProductRepository->expects($this->exactly(1))->method('getOrderProducts')->with($order);
        
        $this->customerService->getCustomers($options);
    }
    
    /**
     * @covers \App\Services\CustomerService::getCustomer
     */
    public function testGetCustomer()
    {
        $customerId = 1;
        $options    = ['loadOrders' => true, 'loadOrderProducts' => true];
        $customer   = new Customer(['id' => $customerId]);
        $order      = new Order(['id' => 10]);
        $this->customerRepository->method('getCustomer')->willReturn($customer);
        $this->orderRepository->method('getOrders')->willReturn([$order]);
        $this->customerRepository->expects($this->exactly(1))->method('getCustomer')->with($customerId);
        $this->orderRepository->expects($this->exactly(1))->method('getOrders')->with($customer);
        $this->orderProductRepository->expects($this->exactly(1))->method('getOrderProducts')->with($order);
        
        $this->customerService->getCustomer($customerId, $options);
    }
}